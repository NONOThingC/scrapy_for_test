# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
python ./tools/llm_api.py --prompt "What is the capital of France?"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- Traditional web scraping methods may fail due to anti-scraping mechanisms:
  - Websites may use JavaScript to dynamically load content
  - Anti-bot measures can detect and block automated requests
  - IP-based rate limiting can prevent continuous scraping
  - Some sites require JavaScript execution to render content
  - Headers and cookies validation may be implemented
  - CAPTCHAs may be triggered by suspicious activity

# Scratchpad

## Current Task: Implement Job Classification Model

### Current Progress:
[X] 1. Initial setup
    - ~~Fix import issues~~
    - ~~Set up basic scraper structure~~
    - ~~Configure logging~~

[X] 2. Fix yuanjisong.com scraper
    - ~~Fix selectors for project containers~~
    - ~~Implement proper error handling~~
    - ~~Extract all required fields~~
    - ~~Add debug logging~~
    - ~~Test list page scraping~~
    - ~~Test detail page scraping~~

[X] 3. Implement sxsapi.com scraper
    - ~~Create test script using result.markdown~~
    - ~~Extract and validate job listing links~~
    - ~~Implement detail page scraping~~
    - ~~Update data saving logic~~

[X] 4. Test and validate
    - ~~Test list page scraping~~
    - ~~Test detail page scraping~~
    - ~~Verify data completeness~~
    - ~~Check error handling~~

[ ] 5. Classification Model Implementation
    - [ ] Data preprocessing
        - Load and combine data from both sources
        - Clean and normalize text fields
        - Handle missing values
    - [ ] Feature engineering
        - Create TF-IDF vectors from title and description
        - Extract price ranges and duration features
    - [ ] Clustering
        - Perform semantic clustering using K-means
        - Determine optimal number of clusters
        - Analyze cluster characteristics
    - [ ] Classification
        - Generate cluster labels using LLM
        - Create classification prompts
        - Validate classification results
    - [ ] Visualization
        - Plot price distributions by cluster
        - Create cluster summary statistics
        - Generate insights report

### Next Steps:
1. Implement data preprocessing pipeline
2. Create clustering model
3. Generate cluster labels
4. Create visualizations
5. Document insights

### Progress Tracking:
Completed:
- Basic scraper setup and configuration
- Initial testing with Crawl4AI
- Fixed yuanjisong.com scraper
- Implemented sxsapi.com scraper
- Added comprehensive logging
- Implemented proper error handling
- Successfully tested both scrapers

In Progress:
- Implementing classification model
- Preparing data preprocessing pipeline


